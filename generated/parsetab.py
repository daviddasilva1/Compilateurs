
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftADD_OPleftMUL_OPleftCOMPARATORADD_OP COMPARATOR DEF ENTER EQU FLOAT IDENTIFIER IF INT MUL_OP POINTS PRINT TAB WHILE programme : statement   programme : statement ENTER programme  statement : assignation\n\t\t\t| structure  expression : INT\n\t\t| FLOAT \n\t\t| IDENTIFIER \n\t\t expression : expression MUL_OP expression \n\t   | expression ADD_OP expression\n\t   | expression COMPARATOR expression assignation : IDENTIFIER EQU expression  statement : PRINT expression structure : IF expression POINTS ENTER TAB programme '#' structure : DEF expression '(' ')' POINTS ENTER TAB programme '#'  structure : WHILE expression POINTS ENTER TAB programme '#' expression : '(' expression ')' "
    
_lr_action_items = {'PRINT':([0,10,36,38,43,],[5,5,5,5,5,]),'IDENTIFIER':([0,5,7,8,9,10,15,16,21,22,23,36,38,43,],[6,14,14,14,14,6,14,14,14,14,14,6,6,6,]),'IF':([0,10,36,38,43,],[7,7,7,7,7,]),'DEF':([0,10,36,38,43,],[8,8,8,8,8,]),'WHILE':([0,10,36,38,43,],[9,9,9,9,9,]),'$end':([1,2,3,4,11,12,13,14,20,25,29,30,31,32,42,44,46,],[0,-1,-3,-4,-12,-5,-6,-7,-2,-11,-8,-9,-10,-16,-13,-15,-14,]),'#':([2,3,4,11,12,13,14,20,25,29,30,31,32,39,41,42,44,45,46,],[-1,-3,-4,-12,-5,-6,-7,-2,-11,-8,-9,-10,-16,42,44,-13,-15,46,-14,]),'ENTER':([2,3,4,11,12,13,14,25,26,28,29,30,31,32,37,42,44,46,],[10,-3,-4,-12,-5,-6,-7,-11,33,35,-8,-9,-10,-16,40,-13,-15,-14,]),'INT':([5,7,8,9,15,16,21,22,23,],[12,12,12,12,12,12,12,12,12,]),'FLOAT':([5,7,8,9,15,16,21,22,23,],[13,13,13,13,13,13,13,13,13,]),'(':([5,7,8,9,12,13,14,15,16,18,21,22,23,29,30,31,32,],[15,15,15,15,-5,-6,-7,15,15,27,15,15,15,-8,-9,-10,-16,]),'EQU':([6,],[16,]),'MUL_OP':([11,12,13,14,17,18,19,24,25,29,30,31,32,],[21,-5,-6,-7,21,21,21,21,21,-8,21,-10,-16,]),'ADD_OP':([11,12,13,14,17,18,19,24,25,29,30,31,32,],[22,-5,-6,-7,22,22,22,22,22,-8,-9,-10,-16,]),'COMPARATOR':([11,12,13,14,17,18,19,24,25,29,30,31,32,],[23,-5,-6,-7,23,23,23,23,23,23,23,-10,-16,]),'POINTS':([12,13,14,17,19,29,30,31,32,34,],[-5,-6,-7,26,28,-8,-9,-10,-16,37,]),')':([12,13,14,24,27,29,30,31,32,],[-5,-6,-7,32,34,-8,-9,-10,-16,]),'TAB':([33,35,40,],[36,38,43,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,10,36,38,43,],[1,20,39,41,45,]),'statement':([0,10,36,38,43,],[2,2,2,2,2,]),'assignation':([0,10,36,38,43,],[3,3,3,3,3,]),'structure':([0,10,36,38,43,],[4,4,4,4,4,]),'expression':([5,7,8,9,15,16,21,22,23,],[11,17,18,19,24,25,29,30,31,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','pythonParser.py',21),
  ('programme -> statement ENTER programme','programme',3,'p_programme_recursive','pythonParser.py',25),
  ('statement -> assignation','statement',1,'p_statement','pythonParser.py',29),
  ('statement -> structure','statement',1,'p_statement','pythonParser.py',30),
  ('expression -> INT','expression',1,'p_expression_num_or_var','pythonParser.py',34),
  ('expression -> FLOAT','expression',1,'p_expression_num_or_var','pythonParser.py',35),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','pythonParser.py',36),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','pythonParser.py',41),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','pythonParser.py',42),
  ('expression -> expression COMPARATOR expression','expression',3,'p_expression_op','pythonParser.py',43),
  ('assignation -> IDENTIFIER EQU expression','assignation',3,'p_assign','pythonParser.py',47),
  ('statement -> PRINT expression','statement',2,'p_statement_print','pythonParser.py',52),
  ('structure -> IF expression POINTS ENTER TAB programme #','structure',7,'p_structure_if','pythonParser.py',57),
  ('structure -> DEF expression ( ) POINTS ENTER TAB programme #','structure',9,'p_structure_function','pythonParser.py',61),
  ('structure -> WHILE expression POINTS ENTER TAB programme #','structure',7,'p_structure_while','pythonParser.py',65),
  ('expression -> ( expression )','expression',3,'p_expression_paren','pythonParser.py',69),
]
